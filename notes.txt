//TO DO :
1. correct calculation of mismatch percentage in case if ignore select and also discuss about mismatch % when image dimensions are diffrent -- > subtract the ignored pixels
2. add correct output format and also add feature for opaque and transparent
3. add the improvement the elemenets from mismatches that are already removed
3. providing support for backward compatibility for curent DCS.
4. error handling for ignoreDraw ( whether boxes arr is valid array given the input)
5. separate out the concerns and more readability.
6. Handling for Seg faults and clearing all memory in case of seg faults.
paint the left over mismatched rows

// TO DOs :
1. code profiling and check for memory leaks 
2. Add load testing support
2. handle errors and logging 
3. add unit tests  
4. add resemble utils too 
5. separate helper fuctions and main functions in image comparator 
6. generate large set of results for resemble vs curr library and reports for performance and accuracy


// Deployment Tasks 
1. C++ library and compatibility adding for JS  --->      shorthand easy solution 
2. C++ AWS Lambda function + c++ web server     --->      hard but peroformance wise good solution

Points to Note: 
1. Large Image issue in resemble is because ff Node-Canvas , and here we use opencv::canvas,and hence this probably shouldnt fail, but need effective testing.
2. pixels get bloated as seen in the demo image of zuppee image diff

// error handling
1. handle loading of images 
2. handle creation of canvas errors 

//optimization : lot of calls  for the compare pixels fnction at the root lvl 
1. cache ignoreBoxes/ boundingBoxes resutls for every pixel so that we dont loop everytime over the results
2. cache anitaliasing for every pixel at the max. 

// later on optimizations (if required )  // NOT TO BE DONE NOW 
1. multithtreading for parellel loops 
2. work around with LCS mutlitthreading algorithm


#### TO DISCUSS :
// which image to clone for result image ::: discussion  
// work on input output  handling for the code  ::: discussion (backward compatibility)
// some things around algorithm 
discuss about height > 200 optimization  ::: discussion 


// non primitive tasks
10. Unit Tests 
// check for memory leaks etc issues 
// font smoothing corrections 


// Future Features Planned 
// floating regions feature 
// points of mismatch feature (red animation)
// origin shift for ignore Draw 
// DOM  parser for diffrences 
// Layout parser 

RUN: 
rm -rf build 
mkdir build 
cd build 
cmake .. -DCMAKE_TOOLCHAIN_FILE=/Users/shrinishv/Documents/vcpkg/scripts/buildsystems/vcpkg.cmake
make
./image_comparison





// DECISIONS TO TAKE 
2. Remove DCS (Lambda function) or not ---> to discuss ( maybe hard to integrate)
3. Need to change default project settings for (scaleToSameSize) and others too. 

// ADVANTAGES over resemble 
1. faster by 2-3 sec , because in c++ in normal cases 
2. correct calculation of mismatch % in case of ignore select case 
3. no pixelated images in case if alpha channels are not present and accurate error colors and feature shipping as opposed to resemble where pixels used to bloat due to poor error handling of alpha channels. 
4. Liberty to add any new features as per custom request ------> font smoothing corrections POC in progress 
5. Faster image comparisons in case of large case images, as now entire thing handled in c++ within library 
